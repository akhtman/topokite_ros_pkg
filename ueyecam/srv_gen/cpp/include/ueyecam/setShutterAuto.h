/* Auto-generated by genmsg_cpp for file /home/topo/ros/topokite/ueyecam/srv/setShutterAuto.srv */
#ifndef UEYECAM_SERVICE_SETSHUTTERAUTO_H
#define UEYECAM_SERVICE_SETSHUTTERAUTO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace ueyecam
{
template <class ContainerAllocator>
struct setShutterAutoRequest_ {
  typedef setShutterAutoRequest_<ContainerAllocator> Type;

  setShutterAutoRequest_()
  : autoShutterOn(false)
  {
  }

  setShutterAutoRequest_(const ContainerAllocator& _alloc)
  : autoShutterOn(false)
  {
  }

  typedef uint8_t _autoShutterOn_type;
  uint8_t autoShutterOn;


private:
  static const char* __s_getDataType_() { return "ueyecam/setShutterAutoRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0912a9abc56d421ecbfc7bb6292fb97f"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "6782540b0448994e3619d704361a9735"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool autoShutterOn\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, autoShutterOn);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, autoShutterOn);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(autoShutterOn);
    return size;
  }

  typedef boost::shared_ptr< ::ueyecam::setShutterAutoRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ueyecam::setShutterAutoRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setShutterAutoRequest
typedef  ::ueyecam::setShutterAutoRequest_<std::allocator<void> > setShutterAutoRequest;

typedef boost::shared_ptr< ::ueyecam::setShutterAutoRequest> setShutterAutoRequestPtr;
typedef boost::shared_ptr< ::ueyecam::setShutterAutoRequest const> setShutterAutoRequestConstPtr;


template <class ContainerAllocator>
struct setShutterAutoResponse_ {
  typedef setShutterAutoResponse_<ContainerAllocator> Type;

  setShutterAutoResponse_()
  : currentAutoShutter(false)
  {
  }

  setShutterAutoResponse_(const ContainerAllocator& _alloc)
  : currentAutoShutter(false)
  {
  }

  typedef uint8_t _currentAutoShutter_type;
  uint8_t currentAutoShutter;


private:
  static const char* __s_getDataType_() { return "ueyecam/setShutterAutoResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "fde3d84ca21249e613f55ce2e5a99497"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "6782540b0448994e3619d704361a9735"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool currentAutoShutter\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, currentAutoShutter);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, currentAutoShutter);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(currentAutoShutter);
    return size;
  }

  typedef boost::shared_ptr< ::ueyecam::setShutterAutoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ueyecam::setShutterAutoResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setShutterAutoResponse
typedef  ::ueyecam::setShutterAutoResponse_<std::allocator<void> > setShutterAutoResponse;

typedef boost::shared_ptr< ::ueyecam::setShutterAutoResponse> setShutterAutoResponsePtr;
typedef boost::shared_ptr< ::ueyecam::setShutterAutoResponse const> setShutterAutoResponseConstPtr;

struct setShutterAuto
{

typedef setShutterAutoRequest Request;
typedef setShutterAutoResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct setShutterAuto
} // namespace ueyecam

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setShutterAutoRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setShutterAutoRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ueyecam::setShutterAutoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0912a9abc56d421ecbfc7bb6292fb97f";
  }

  static const char* value(const  ::ueyecam::setShutterAutoRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0912a9abc56d421eULL;
  static const uint64_t static_value2 = 0xcbfc7bb6292fb97fULL;
};

template<class ContainerAllocator>
struct DataType< ::ueyecam::setShutterAutoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setShutterAutoRequest";
  }

  static const char* value(const  ::ueyecam::setShutterAutoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ueyecam::setShutterAutoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool autoShutterOn\n\
\n\
";
  }

  static const char* value(const  ::ueyecam::setShutterAutoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ueyecam::setShutterAutoRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setShutterAutoResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setShutterAutoResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ueyecam::setShutterAutoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fde3d84ca21249e613f55ce2e5a99497";
  }

  static const char* value(const  ::ueyecam::setShutterAutoResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfde3d84ca21249e6ULL;
  static const uint64_t static_value2 = 0x13f55ce2e5a99497ULL;
};

template<class ContainerAllocator>
struct DataType< ::ueyecam::setShutterAutoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setShutterAutoResponse";
  }

  static const char* value(const  ::ueyecam::setShutterAutoResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ueyecam::setShutterAutoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool currentAutoShutter\n\
\n\
";
  }

  static const char* value(const  ::ueyecam::setShutterAutoResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ueyecam::setShutterAutoResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ueyecam::setShutterAutoRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.autoShutterOn);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setShutterAutoRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ueyecam::setShutterAutoResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.currentAutoShutter);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setShutterAutoResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<ueyecam::setShutterAuto> {
  static const char* value() 
  {
    return "6782540b0448994e3619d704361a9735";
  }

  static const char* value(const ueyecam::setShutterAuto&) { return value(); } 
};

template<>
struct DataType<ueyecam::setShutterAuto> {
  static const char* value() 
  {
    return "ueyecam/setShutterAuto";
  }

  static const char* value(const ueyecam::setShutterAuto&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ueyecam::setShutterAutoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6782540b0448994e3619d704361a9735";
  }

  static const char* value(const ueyecam::setShutterAutoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ueyecam::setShutterAutoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setShutterAuto";
  }

  static const char* value(const ueyecam::setShutterAutoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ueyecam::setShutterAutoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6782540b0448994e3619d704361a9735";
  }

  static const char* value(const ueyecam::setShutterAutoResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ueyecam::setShutterAutoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setShutterAuto";
  }

  static const char* value(const ueyecam::setShutterAutoResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // UEYECAM_SERVICE_SETSHUTTERAUTO_H

