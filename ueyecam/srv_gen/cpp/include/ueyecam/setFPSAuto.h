/* Auto-generated by genmsg_cpp for file /home/topo/ros/topokite/ueyecam/srv/setFPSAuto.srv */
#ifndef UEYECAM_SERVICE_SETFPSAUTO_H
#define UEYECAM_SERVICE_SETFPSAUTO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace ueyecam
{
template <class ContainerAllocator>
struct setFPSAutoRequest_ {
  typedef setFPSAutoRequest_<ContainerAllocator> Type;

  setFPSAutoRequest_()
  : autoFPSon(false)
  {
  }

  setFPSAutoRequest_(const ContainerAllocator& _alloc)
  : autoFPSon(false)
  {
  }

  typedef uint8_t _autoFPSon_type;
  uint8_t autoFPSon;


private:
  static const char* __s_getDataType_() { return "ueyecam/setFPSAutoRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "03872f67e53d848c313b3bbf1e74456b"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "ab88e3b58f1545cec00723d68863fabc"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool autoFPSon\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, autoFPSon);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, autoFPSon);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(autoFPSon);
    return size;
  }

  typedef boost::shared_ptr< ::ueyecam::setFPSAutoRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ueyecam::setFPSAutoRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setFPSAutoRequest
typedef  ::ueyecam::setFPSAutoRequest_<std::allocator<void> > setFPSAutoRequest;

typedef boost::shared_ptr< ::ueyecam::setFPSAutoRequest> setFPSAutoRequestPtr;
typedef boost::shared_ptr< ::ueyecam::setFPSAutoRequest const> setFPSAutoRequestConstPtr;


template <class ContainerAllocator>
struct setFPSAutoResponse_ {
  typedef setFPSAutoResponse_<ContainerAllocator> Type;

  setFPSAutoResponse_()
  : currentAutoFPs(false)
  {
  }

  setFPSAutoResponse_(const ContainerAllocator& _alloc)
  : currentAutoFPs(false)
  {
  }

  typedef uint8_t _currentAutoFPs_type;
  uint8_t currentAutoFPs;


private:
  static const char* __s_getDataType_() { return "ueyecam/setFPSAutoResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "eaa2f38600b4bb1de5828d459d0a7a3a"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "ab88e3b58f1545cec00723d68863fabc"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool currentAutoFPs\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, currentAutoFPs);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, currentAutoFPs);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(currentAutoFPs);
    return size;
  }

  typedef boost::shared_ptr< ::ueyecam::setFPSAutoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ueyecam::setFPSAutoResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setFPSAutoResponse
typedef  ::ueyecam::setFPSAutoResponse_<std::allocator<void> > setFPSAutoResponse;

typedef boost::shared_ptr< ::ueyecam::setFPSAutoResponse> setFPSAutoResponsePtr;
typedef boost::shared_ptr< ::ueyecam::setFPSAutoResponse const> setFPSAutoResponseConstPtr;

struct setFPSAuto
{

typedef setFPSAutoRequest Request;
typedef setFPSAutoResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct setFPSAuto
} // namespace ueyecam

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setFPSAutoRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setFPSAutoRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ueyecam::setFPSAutoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "03872f67e53d848c313b3bbf1e74456b";
  }

  static const char* value(const  ::ueyecam::setFPSAutoRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x03872f67e53d848cULL;
  static const uint64_t static_value2 = 0x313b3bbf1e74456bULL;
};

template<class ContainerAllocator>
struct DataType< ::ueyecam::setFPSAutoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setFPSAutoRequest";
  }

  static const char* value(const  ::ueyecam::setFPSAutoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ueyecam::setFPSAutoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool autoFPSon\n\
\n\
";
  }

  static const char* value(const  ::ueyecam::setFPSAutoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ueyecam::setFPSAutoRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setFPSAutoResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setFPSAutoResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ueyecam::setFPSAutoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eaa2f38600b4bb1de5828d459d0a7a3a";
  }

  static const char* value(const  ::ueyecam::setFPSAutoResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeaa2f38600b4bb1dULL;
  static const uint64_t static_value2 = 0xe5828d459d0a7a3aULL;
};

template<class ContainerAllocator>
struct DataType< ::ueyecam::setFPSAutoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setFPSAutoResponse";
  }

  static const char* value(const  ::ueyecam::setFPSAutoResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ueyecam::setFPSAutoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool currentAutoFPs\n\
\n\
";
  }

  static const char* value(const  ::ueyecam::setFPSAutoResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ueyecam::setFPSAutoResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ueyecam::setFPSAutoRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.autoFPSon);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setFPSAutoRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ueyecam::setFPSAutoResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.currentAutoFPs);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setFPSAutoResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<ueyecam::setFPSAuto> {
  static const char* value() 
  {
    return "ab88e3b58f1545cec00723d68863fabc";
  }

  static const char* value(const ueyecam::setFPSAuto&) { return value(); } 
};

template<>
struct DataType<ueyecam::setFPSAuto> {
  static const char* value() 
  {
    return "ueyecam/setFPSAuto";
  }

  static const char* value(const ueyecam::setFPSAuto&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ueyecam::setFPSAutoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ab88e3b58f1545cec00723d68863fabc";
  }

  static const char* value(const ueyecam::setFPSAutoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ueyecam::setFPSAutoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setFPSAuto";
  }

  static const char* value(const ueyecam::setFPSAutoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ueyecam::setFPSAutoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ab88e3b58f1545cec00723d68863fabc";
  }

  static const char* value(const ueyecam::setFPSAutoResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ueyecam::setFPSAutoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setFPSAuto";
  }

  static const char* value(const ueyecam::setFPSAutoResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // UEYECAM_SERVICE_SETFPSAUTO_H

