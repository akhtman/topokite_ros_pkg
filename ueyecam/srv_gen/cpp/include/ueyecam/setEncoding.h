/* Auto-generated by genmsg_cpp for file /home/topo/ros/topokite/ueyecam/srv/setEncoding.srv */
#ifndef UEYECAM_SERVICE_SETENCODING_H
#define UEYECAM_SERVICE_SETENCODING_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace ueyecam
{
template <class ContainerAllocator>
struct setEncodingRequest_ {
  typedef setEncodingRequest_<ContainerAllocator> Type;

  setEncodingRequest_()
  : encoding()
  {
  }

  setEncodingRequest_(const ContainerAllocator& _alloc)
  : encoding(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _encoding_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  encoding;


private:
  static const char* __s_getDataType_() { return "ueyecam/setEncodingRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "fe0aa0e3bb3f44bd4e5c8adc26ab7fcc"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "fe0aa0e3bb3f44bd4e5c8adc26ab7fcc"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string encoding\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, encoding);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, encoding);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(encoding);
    return size;
  }

  typedef boost::shared_ptr< ::ueyecam::setEncodingRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ueyecam::setEncodingRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setEncodingRequest
typedef  ::ueyecam::setEncodingRequest_<std::allocator<void> > setEncodingRequest;

typedef boost::shared_ptr< ::ueyecam::setEncodingRequest> setEncodingRequestPtr;
typedef boost::shared_ptr< ::ueyecam::setEncodingRequest const> setEncodingRequestConstPtr;


template <class ContainerAllocator>
struct setEncodingResponse_ {
  typedef setEncodingResponse_<ContainerAllocator> Type;

  setEncodingResponse_()
  {
  }

  setEncodingResponse_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "ueyecam/setEncodingResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "fe0aa0e3bb3f44bd4e5c8adc26ab7fcc"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::ueyecam::setEncodingResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ueyecam::setEncodingResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setEncodingResponse
typedef  ::ueyecam::setEncodingResponse_<std::allocator<void> > setEncodingResponse;

typedef boost::shared_ptr< ::ueyecam::setEncodingResponse> setEncodingResponsePtr;
typedef boost::shared_ptr< ::ueyecam::setEncodingResponse const> setEncodingResponseConstPtr;

struct setEncoding
{

typedef setEncodingRequest Request;
typedef setEncodingResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct setEncoding
} // namespace ueyecam

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setEncodingRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setEncodingRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ueyecam::setEncodingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fe0aa0e3bb3f44bd4e5c8adc26ab7fcc";
  }

  static const char* value(const  ::ueyecam::setEncodingRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfe0aa0e3bb3f44bdULL;
  static const uint64_t static_value2 = 0x4e5c8adc26ab7fccULL;
};

template<class ContainerAllocator>
struct DataType< ::ueyecam::setEncodingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setEncodingRequest";
  }

  static const char* value(const  ::ueyecam::setEncodingRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ueyecam::setEncodingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string encoding\n\
\n\
";
  }

  static const char* value(const  ::ueyecam::setEncodingRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setEncodingResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setEncodingResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ueyecam::setEncodingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::ueyecam::setEncodingResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::ueyecam::setEncodingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setEncodingResponse";
  }

  static const char* value(const  ::ueyecam::setEncodingResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ueyecam::setEncodingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::ueyecam::setEncodingResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ueyecam::setEncodingResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ueyecam::setEncodingRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.encoding);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setEncodingRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ueyecam::setEncodingResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setEncodingResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<ueyecam::setEncoding> {
  static const char* value() 
  {
    return "fe0aa0e3bb3f44bd4e5c8adc26ab7fcc";
  }

  static const char* value(const ueyecam::setEncoding&) { return value(); } 
};

template<>
struct DataType<ueyecam::setEncoding> {
  static const char* value() 
  {
    return "ueyecam/setEncoding";
  }

  static const char* value(const ueyecam::setEncoding&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ueyecam::setEncodingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fe0aa0e3bb3f44bd4e5c8adc26ab7fcc";
  }

  static const char* value(const ueyecam::setEncodingRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ueyecam::setEncodingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setEncoding";
  }

  static const char* value(const ueyecam::setEncodingRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ueyecam::setEncodingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fe0aa0e3bb3f44bd4e5c8adc26ab7fcc";
  }

  static const char* value(const ueyecam::setEncodingResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ueyecam::setEncodingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setEncoding";
  }

  static const char* value(const ueyecam::setEncodingResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // UEYECAM_SERVICE_SETENCODING_H

