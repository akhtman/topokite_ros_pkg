/* Auto-generated by genmsg_cpp for file /home/topo/ros/topokite/ueyecam/srv/setFPS.srv */
#ifndef UEYECAM_SERVICE_SETFPS_H
#define UEYECAM_SERVICE_SETFPS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace ueyecam
{
template <class ContainerAllocator>
struct setFPSRequest_ {
  typedef setFPSRequest_<ContainerAllocator> Type;

  setFPSRequest_()
  : fps(0.0)
  {
  }

  setFPSRequest_(const ContainerAllocator& _alloc)
  : fps(0.0)
  {
  }

  typedef float _fps_type;
  float fps;


private:
  static const char* __s_getDataType_() { return "ueyecam/setFPSRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "f35998988d4bc88658907ac653263ca7"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "d6233c61096f7e9e4b2f127a64d00493"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32 fps\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, fps);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, fps);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(fps);
    return size;
  }

  typedef boost::shared_ptr< ::ueyecam::setFPSRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ueyecam::setFPSRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setFPSRequest
typedef  ::ueyecam::setFPSRequest_<std::allocator<void> > setFPSRequest;

typedef boost::shared_ptr< ::ueyecam::setFPSRequest> setFPSRequestPtr;
typedef boost::shared_ptr< ::ueyecam::setFPSRequest const> setFPSRequestConstPtr;


template <class ContainerAllocator>
struct setFPSResponse_ {
  typedef setFPSResponse_<ContainerAllocator> Type;

  setFPSResponse_()
  : newFPS(0.0)
  {
  }

  setFPSResponse_(const ContainerAllocator& _alloc)
  : newFPS(0.0)
  {
  }

  typedef float _newFPS_type;
  float newFPS;


private:
  static const char* __s_getDataType_() { return "ueyecam/setFPSResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "e3cb4d75f077f05fffd2544b3f6c0a6b"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "d6233c61096f7e9e4b2f127a64d00493"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32 newFPS\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, newFPS);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, newFPS);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(newFPS);
    return size;
  }

  typedef boost::shared_ptr< ::ueyecam::setFPSResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ueyecam::setFPSResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setFPSResponse
typedef  ::ueyecam::setFPSResponse_<std::allocator<void> > setFPSResponse;

typedef boost::shared_ptr< ::ueyecam::setFPSResponse> setFPSResponsePtr;
typedef boost::shared_ptr< ::ueyecam::setFPSResponse const> setFPSResponseConstPtr;

struct setFPS
{

typedef setFPSRequest Request;
typedef setFPSResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct setFPS
} // namespace ueyecam

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setFPSRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setFPSRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ueyecam::setFPSRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f35998988d4bc88658907ac653263ca7";
  }

  static const char* value(const  ::ueyecam::setFPSRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf35998988d4bc886ULL;
  static const uint64_t static_value2 = 0x58907ac653263ca7ULL;
};

template<class ContainerAllocator>
struct DataType< ::ueyecam::setFPSRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setFPSRequest";
  }

  static const char* value(const  ::ueyecam::setFPSRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ueyecam::setFPSRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 fps\n\
\n\
";
  }

  static const char* value(const  ::ueyecam::setFPSRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ueyecam::setFPSRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setFPSResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setFPSResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ueyecam::setFPSResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e3cb4d75f077f05fffd2544b3f6c0a6b";
  }

  static const char* value(const  ::ueyecam::setFPSResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe3cb4d75f077f05fULL;
  static const uint64_t static_value2 = 0xffd2544b3f6c0a6bULL;
};

template<class ContainerAllocator>
struct DataType< ::ueyecam::setFPSResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setFPSResponse";
  }

  static const char* value(const  ::ueyecam::setFPSResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ueyecam::setFPSResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 newFPS\n\
\n\
";
  }

  static const char* value(const  ::ueyecam::setFPSResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ueyecam::setFPSResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ueyecam::setFPSRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.fps);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setFPSRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ueyecam::setFPSResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.newFPS);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setFPSResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<ueyecam::setFPS> {
  static const char* value() 
  {
    return "d6233c61096f7e9e4b2f127a64d00493";
  }

  static const char* value(const ueyecam::setFPS&) { return value(); } 
};

template<>
struct DataType<ueyecam::setFPS> {
  static const char* value() 
  {
    return "ueyecam/setFPS";
  }

  static const char* value(const ueyecam::setFPS&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ueyecam::setFPSRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d6233c61096f7e9e4b2f127a64d00493";
  }

  static const char* value(const ueyecam::setFPSRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ueyecam::setFPSRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setFPS";
  }

  static const char* value(const ueyecam::setFPSRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ueyecam::setFPSResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d6233c61096f7e9e4b2f127a64d00493";
  }

  static const char* value(const ueyecam::setFPSResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ueyecam::setFPSResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setFPS";
  }

  static const char* value(const ueyecam::setFPSResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // UEYECAM_SERVICE_SETFPS_H

