/* Auto-generated by genmsg_cpp for file /home/topo/ros/topokite/ueyecam/srv/setGainAuto.srv */
#ifndef UEYECAM_SERVICE_SETGAINAUTO_H
#define UEYECAM_SERVICE_SETGAINAUTO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace ueyecam
{
template <class ContainerAllocator>
struct setGainAutoRequest_ {
  typedef setGainAutoRequest_<ContainerAllocator> Type;

  setGainAutoRequest_()
  : autoGainOn(false)
  {
  }

  setGainAutoRequest_(const ContainerAllocator& _alloc)
  : autoGainOn(false)
  {
  }

  typedef uint8_t _autoGainOn_type;
  uint8_t autoGainOn;


private:
  static const char* __s_getDataType_() { return "ueyecam/setGainAutoRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "e3fbecc5a2668549fb9b54ab5a02b845"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "f4bcdb7cb8a2d309439357abe46d441b"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool autoGainOn\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, autoGainOn);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, autoGainOn);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(autoGainOn);
    return size;
  }

  typedef boost::shared_ptr< ::ueyecam::setGainAutoRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ueyecam::setGainAutoRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setGainAutoRequest
typedef  ::ueyecam::setGainAutoRequest_<std::allocator<void> > setGainAutoRequest;

typedef boost::shared_ptr< ::ueyecam::setGainAutoRequest> setGainAutoRequestPtr;
typedef boost::shared_ptr< ::ueyecam::setGainAutoRequest const> setGainAutoRequestConstPtr;


template <class ContainerAllocator>
struct setGainAutoResponse_ {
  typedef setGainAutoResponse_<ContainerAllocator> Type;

  setGainAutoResponse_()
  : currentAutoGain(false)
  {
  }

  setGainAutoResponse_(const ContainerAllocator& _alloc)
  : currentAutoGain(false)
  {
  }

  typedef uint8_t _currentAutoGain_type;
  uint8_t currentAutoGain;


private:
  static const char* __s_getDataType_() { return "ueyecam/setGainAutoResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "ac7e1541c0c8ceb28dace7eb5a6c2b22"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "f4bcdb7cb8a2d309439357abe46d441b"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool currentAutoGain\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, currentAutoGain);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, currentAutoGain);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(currentAutoGain);
    return size;
  }

  typedef boost::shared_ptr< ::ueyecam::setGainAutoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ueyecam::setGainAutoResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setGainAutoResponse
typedef  ::ueyecam::setGainAutoResponse_<std::allocator<void> > setGainAutoResponse;

typedef boost::shared_ptr< ::ueyecam::setGainAutoResponse> setGainAutoResponsePtr;
typedef boost::shared_ptr< ::ueyecam::setGainAutoResponse const> setGainAutoResponseConstPtr;

struct setGainAuto
{

typedef setGainAutoRequest Request;
typedef setGainAutoResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct setGainAuto
} // namespace ueyecam

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setGainAutoRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setGainAutoRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ueyecam::setGainAutoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e3fbecc5a2668549fb9b54ab5a02b845";
  }

  static const char* value(const  ::ueyecam::setGainAutoRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe3fbecc5a2668549ULL;
  static const uint64_t static_value2 = 0xfb9b54ab5a02b845ULL;
};

template<class ContainerAllocator>
struct DataType< ::ueyecam::setGainAutoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setGainAutoRequest";
  }

  static const char* value(const  ::ueyecam::setGainAutoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ueyecam::setGainAutoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool autoGainOn\n\
\n\
";
  }

  static const char* value(const  ::ueyecam::setGainAutoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ueyecam::setGainAutoRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setGainAutoResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setGainAutoResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ueyecam::setGainAutoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ac7e1541c0c8ceb28dace7eb5a6c2b22";
  }

  static const char* value(const  ::ueyecam::setGainAutoResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xac7e1541c0c8ceb2ULL;
  static const uint64_t static_value2 = 0x8dace7eb5a6c2b22ULL;
};

template<class ContainerAllocator>
struct DataType< ::ueyecam::setGainAutoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setGainAutoResponse";
  }

  static const char* value(const  ::ueyecam::setGainAutoResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ueyecam::setGainAutoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool currentAutoGain\n\
\n\
";
  }

  static const char* value(const  ::ueyecam::setGainAutoResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ueyecam::setGainAutoResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ueyecam::setGainAutoRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.autoGainOn);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setGainAutoRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ueyecam::setGainAutoResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.currentAutoGain);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setGainAutoResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<ueyecam::setGainAuto> {
  static const char* value() 
  {
    return "f4bcdb7cb8a2d309439357abe46d441b";
  }

  static const char* value(const ueyecam::setGainAuto&) { return value(); } 
};

template<>
struct DataType<ueyecam::setGainAuto> {
  static const char* value() 
  {
    return "ueyecam/setGainAuto";
  }

  static const char* value(const ueyecam::setGainAuto&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ueyecam::setGainAutoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f4bcdb7cb8a2d309439357abe46d441b";
  }

  static const char* value(const ueyecam::setGainAutoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ueyecam::setGainAutoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setGainAuto";
  }

  static const char* value(const ueyecam::setGainAutoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ueyecam::setGainAutoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f4bcdb7cb8a2d309439357abe46d441b";
  }

  static const char* value(const ueyecam::setGainAutoResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ueyecam::setGainAutoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setGainAuto";
  }

  static const char* value(const ueyecam::setGainAutoResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // UEYECAM_SERVICE_SETGAINAUTO_H

