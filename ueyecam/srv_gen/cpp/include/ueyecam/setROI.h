/* Auto-generated by genmsg_cpp for file /home/topo/ros/topokite/ueyecam/srv/setROI.srv */
#ifndef UEYECAM_SERVICE_SETROI_H
#define UEYECAM_SERVICE_SETROI_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace ueyecam
{
template <class ContainerAllocator>
struct setROIRequest_ {
  typedef setROIRequest_<ContainerAllocator> Type;

  setROIRequest_()
  : width(0)
  , height(0)
  , x_offset(0)
  , y_offset(0)
  {
  }

  setROIRequest_(const ContainerAllocator& _alloc)
  : width(0)
  , height(0)
  , x_offset(0)
  , y_offset(0)
  {
  }

  typedef uint16_t _width_type;
  uint16_t width;

  typedef uint16_t _height_type;
  uint16_t height;

  typedef uint16_t _x_offset_type;
  uint16_t x_offset;

  typedef uint16_t _y_offset_type;
  uint16_t y_offset;


private:
  static const char* __s_getDataType_() { return "ueyecam/setROIRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "cf3c8c4ab295b27e17a9ef4348c69945"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "cf3c8c4ab295b27e17a9ef4348c69945"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "uint16 width\n\
uint16 height\n\
uint16 x_offset\n\
uint16 y_offset\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, width);
    ros::serialization::serialize(stream, height);
    ros::serialization::serialize(stream, x_offset);
    ros::serialization::serialize(stream, y_offset);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, width);
    ros::serialization::deserialize(stream, height);
    ros::serialization::deserialize(stream, x_offset);
    ros::serialization::deserialize(stream, y_offset);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(width);
    size += ros::serialization::serializationLength(height);
    size += ros::serialization::serializationLength(x_offset);
    size += ros::serialization::serializationLength(y_offset);
    return size;
  }

  typedef boost::shared_ptr< ::ueyecam::setROIRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ueyecam::setROIRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setROIRequest
typedef  ::ueyecam::setROIRequest_<std::allocator<void> > setROIRequest;

typedef boost::shared_ptr< ::ueyecam::setROIRequest> setROIRequestPtr;
typedef boost::shared_ptr< ::ueyecam::setROIRequest const> setROIRequestConstPtr;


template <class ContainerAllocator>
struct setROIResponse_ {
  typedef setROIResponse_<ContainerAllocator> Type;

  setROIResponse_()
  {
  }

  setROIResponse_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "ueyecam/setROIResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "cf3c8c4ab295b27e17a9ef4348c69945"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::ueyecam::setROIResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ueyecam::setROIResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setROIResponse
typedef  ::ueyecam::setROIResponse_<std::allocator<void> > setROIResponse;

typedef boost::shared_ptr< ::ueyecam::setROIResponse> setROIResponsePtr;
typedef boost::shared_ptr< ::ueyecam::setROIResponse const> setROIResponseConstPtr;

struct setROI
{

typedef setROIRequest Request;
typedef setROIResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct setROI
} // namespace ueyecam

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setROIRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setROIRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ueyecam::setROIRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cf3c8c4ab295b27e17a9ef4348c69945";
  }

  static const char* value(const  ::ueyecam::setROIRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcf3c8c4ab295b27eULL;
  static const uint64_t static_value2 = 0x17a9ef4348c69945ULL;
};

template<class ContainerAllocator>
struct DataType< ::ueyecam::setROIRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setROIRequest";
  }

  static const char* value(const  ::ueyecam::setROIRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ueyecam::setROIRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint16 width\n\
uint16 height\n\
uint16 x_offset\n\
uint16 y_offset\n\
\n\
";
  }

  static const char* value(const  ::ueyecam::setROIRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ueyecam::setROIRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setROIResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ueyecam::setROIResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ueyecam::setROIResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::ueyecam::setROIResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::ueyecam::setROIResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setROIResponse";
  }

  static const char* value(const  ::ueyecam::setROIResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ueyecam::setROIResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::ueyecam::setROIResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ueyecam::setROIResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ueyecam::setROIRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.width);
    stream.next(m.height);
    stream.next(m.x_offset);
    stream.next(m.y_offset);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setROIRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ueyecam::setROIResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setROIResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<ueyecam::setROI> {
  static const char* value() 
  {
    return "cf3c8c4ab295b27e17a9ef4348c69945";
  }

  static const char* value(const ueyecam::setROI&) { return value(); } 
};

template<>
struct DataType<ueyecam::setROI> {
  static const char* value() 
  {
    return "ueyecam/setROI";
  }

  static const char* value(const ueyecam::setROI&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ueyecam::setROIRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cf3c8c4ab295b27e17a9ef4348c69945";
  }

  static const char* value(const ueyecam::setROIRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ueyecam::setROIRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setROI";
  }

  static const char* value(const ueyecam::setROIRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ueyecam::setROIResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cf3c8c4ab295b27e17a9ef4348c69945";
  }

  static const char* value(const ueyecam::setROIResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ueyecam::setROIResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ueyecam/setROI";
  }

  static const char* value(const ueyecam::setROIResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // UEYECAM_SERVICE_SETROI_H

