"""autogenerated by genmsg_py from setEdgeEnhancementRequest.msg. Do not edit."""
import roslib.message
import struct


class setEdgeEnhancementRequest(roslib.message.Message):
  _md5sum = "7f9fa91369afdf996173b4d7c8a8a339"
  _type = "ueyecam/setEdgeEnhancementRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 edgeEnhancementSet

"""
  __slots__ = ['edgeEnhancementSet']
  _slot_types = ['int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       edgeEnhancementSet
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(setEdgeEnhancementRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.edgeEnhancementSet is None:
        self.edgeEnhancementSet = 0
    else:
      self.edgeEnhancementSet = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_b.pack(self.edgeEnhancementSet))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 1
      (self.edgeEnhancementSet,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_b.pack(self.edgeEnhancementSet))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.edgeEnhancementSet,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_b = struct.Struct("<b")
"""autogenerated by genmsg_py from setEdgeEnhancementResponse.msg. Do not edit."""
import roslib.message
import struct


class setEdgeEnhancementResponse(roslib.message.Message):
  _md5sum = "af20a67d4724049a173c46c5ae32d275"
  _type = "ueyecam/setEdgeEnhancementResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 edgeEnhancementGet
string edgeEnhancementGetString

"""
  __slots__ = ['edgeEnhancementGet','edgeEnhancementGetString']
  _slot_types = ['int8','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       edgeEnhancementGet,edgeEnhancementGetString
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(setEdgeEnhancementResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.edgeEnhancementGet is None:
        self.edgeEnhancementGet = 0
      if self.edgeEnhancementGetString is None:
        self.edgeEnhancementGetString = ''
    else:
      self.edgeEnhancementGet = 0
      self.edgeEnhancementGetString = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_b.pack(self.edgeEnhancementGet))
      _x = self.edgeEnhancementGetString
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 1
      (self.edgeEnhancementGet,) = _struct_b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.edgeEnhancementGetString = str[start:end]
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_b.pack(self.edgeEnhancementGet))
      _x = self.edgeEnhancementGetString
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.edgeEnhancementGet,) = _struct_b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.edgeEnhancementGetString = str[start:end]
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_b = struct.Struct("<b")
class setEdgeEnhancement(roslib.message.ServiceDefinition):
  _type          = 'ueyecam/setEdgeEnhancement'
  _md5sum = '6c12de1e51a773b0295489ad2b111707'
  _request_class  = setEdgeEnhancementRequest
  _response_class = setEdgeEnhancementResponse
