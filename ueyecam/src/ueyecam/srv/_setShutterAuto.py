"""autogenerated by genmsg_py from setShutterAutoRequest.msg. Do not edit."""
import roslib.message
import struct


class setShutterAutoRequest(roslib.message.Message):
  _md5sum = "0912a9abc56d421ecbfc7bb6292fb97f"
  _type = "ueyecam/setShutterAutoRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool autoShutterOn

"""
  __slots__ = ['autoShutterOn']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       autoShutterOn
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(setShutterAutoRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.autoShutterOn is None:
        self.autoShutterOn = False
    else:
      self.autoShutterOn = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_B.pack(self.autoShutterOn))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 1
      (self.autoShutterOn,) = _struct_B.unpack(str[start:end])
      self.autoShutterOn = bool(self.autoShutterOn)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_B.pack(self.autoShutterOn))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.autoShutterOn,) = _struct_B.unpack(str[start:end])
      self.autoShutterOn = bool(self.autoShutterOn)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B = struct.Struct("<B")
"""autogenerated by genmsg_py from setShutterAutoResponse.msg. Do not edit."""
import roslib.message
import struct


class setShutterAutoResponse(roslib.message.Message):
  _md5sum = "fde3d84ca21249e613f55ce2e5a99497"
  _type = "ueyecam/setShutterAutoResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool currentAutoShutter

"""
  __slots__ = ['currentAutoShutter']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       currentAutoShutter
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(setShutterAutoResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.currentAutoShutter is None:
        self.currentAutoShutter = False
    else:
      self.currentAutoShutter = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_B.pack(self.currentAutoShutter))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 1
      (self.currentAutoShutter,) = _struct_B.unpack(str[start:end])
      self.currentAutoShutter = bool(self.currentAutoShutter)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_B.pack(self.currentAutoShutter))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.currentAutoShutter,) = _struct_B.unpack(str[start:end])
      self.currentAutoShutter = bool(self.currentAutoShutter)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B = struct.Struct("<B")
class setShutterAuto(roslib.message.ServiceDefinition):
  _type          = 'ueyecam/setShutterAuto'
  _md5sum = '6782540b0448994e3619d704361a9735'
  _request_class  = setShutterAutoRequest
  _response_class = setShutterAutoResponse
