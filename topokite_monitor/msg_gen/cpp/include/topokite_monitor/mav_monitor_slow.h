/* Auto-generated by genmsg_cpp for file /home/topo/ros/topokite_ros_pkg/topokite_monitor/msg/mav_monitor_slow.msg */
#ifndef TOPOKITE_MONITOR_MESSAGE_MAV_MONITOR_SLOW_H
#define TOPOKITE_MONITOR_MESSAGE_MAV_MONITOR_SLOW_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace topokite_monitor
{
template <class ContainerAllocator>
struct mav_monitor_slow_ {
  typedef mav_monitor_slow_<ContainerAllocator> Type;

  mav_monitor_slow_()
  : header()
  , battery_voltage(0.0)
  , flight_mode_ll()
  , state_estimation()
  , position_control()
  , serial_interface_enabled(false)
  , serial_interface_active(false)
  , flight_time(0.0)
  , cpu_load(0.0)
  , motor_status()
  , gps_status()
  , gps_num_satellites(0)
  , have_SSDK_parameters(false)
  , timesync_offset(0.0)
  , latitude(0.0)
  , longitude(0.0)
  , altitude(0.0)
  , pressure_height(0.0)
  , velocity_x(0.0)
  , velocity_y(0.0)
  {
  }

  mav_monitor_slow_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , battery_voltage(0.0)
  , flight_mode_ll(_alloc)
  , state_estimation(_alloc)
  , position_control(_alloc)
  , serial_interface_enabled(false)
  , serial_interface_active(false)
  , flight_time(0.0)
  , cpu_load(0.0)
  , motor_status(_alloc)
  , gps_status(_alloc)
  , gps_num_satellites(0)
  , have_SSDK_parameters(false)
  , timesync_offset(0.0)
  , latitude(0.0)
  , longitude(0.0)
  , altitude(0.0)
  , pressure_height(0.0)
  , velocity_x(0.0)
  , velocity_y(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef float _battery_voltage_type;
  float battery_voltage;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _flight_mode_ll_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  flight_mode_ll;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_estimation_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  state_estimation;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _position_control_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  position_control;

  typedef uint8_t _serial_interface_enabled_type;
  uint8_t serial_interface_enabled;

  typedef uint8_t _serial_interface_active_type;
  uint8_t serial_interface_active;

  typedef float _flight_time_type;
  float flight_time;

  typedef float _cpu_load_type;
  float cpu_load;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _motor_status_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  motor_status;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gps_status_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gps_status;

  typedef int32_t _gps_num_satellites_type;
  int32_t gps_num_satellites;

  typedef uint8_t _have_SSDK_parameters_type;
  uint8_t have_SSDK_parameters;

  typedef float _timesync_offset_type;
  float timesync_offset;

  typedef double _latitude_type;
  double latitude;

  typedef double _longitude_type;
  double longitude;

  typedef double _altitude_type;
  double altitude;

  typedef double _pressure_height_type;
  double pressure_height;

  typedef double _velocity_x_type;
  double velocity_x;

  typedef double _velocity_y_type;
  double velocity_y;


  typedef boost::shared_ptr< ::topokite_monitor::mav_monitor_slow_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::topokite_monitor::mav_monitor_slow_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct mav_monitor_slow
typedef  ::topokite_monitor::mav_monitor_slow_<std::allocator<void> > mav_monitor_slow;

typedef boost::shared_ptr< ::topokite_monitor::mav_monitor_slow> mav_monitor_slowPtr;
typedef boost::shared_ptr< ::topokite_monitor::mav_monitor_slow const> mav_monitor_slowConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::topokite_monitor::mav_monitor_slow_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::topokite_monitor::mav_monitor_slow_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace topokite_monitor

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::topokite_monitor::mav_monitor_slow_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::topokite_monitor::mav_monitor_slow_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::topokite_monitor::mav_monitor_slow_<ContainerAllocator> > {
  static const char* value() 
  {
    return "30364e5cea3b1bf4835421c59efec4c5";
  }

  static const char* value(const  ::topokite_monitor::mav_monitor_slow_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x30364e5cea3b1bf4ULL;
  static const uint64_t static_value2 = 0x835421c59efec4c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::topokite_monitor::mav_monitor_slow_<ContainerAllocator> > {
  static const char* value() 
  {
    return "topokite_monitor/mav_monitor_slow";
  }

  static const char* value(const  ::topokite_monitor::mav_monitor_slow_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::topokite_monitor::mav_monitor_slow_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
#MAV status\n\
\n\
float32     battery_voltage\n\
string      flight_mode_ll\n\
string      state_estimation\n\
string      position_control\n\
bool        serial_interface_enabled\n\
bool        serial_interface_active\n\
float32     flight_time\n\
float32     cpu_load\n\
\n\
string      motor_status\n\
\n\
string      gps_status\n\
int32       gps_num_satellites\n\
\n\
bool        have_SSDK_parameters\n\
\n\
float32     timesync_offset\n\
\n\
#GPS data\n\
\n\
float64     latitude\n\
float64     longitude\n\
float64     altitude\n\
float64     pressure_height\n\
float64     velocity_x\n\
float64     velocity_y\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::topokite_monitor::mav_monitor_slow_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::topokite_monitor::mav_monitor_slow_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::topokite_monitor::mav_monitor_slow_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::topokite_monitor::mav_monitor_slow_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.battery_voltage);
    stream.next(m.flight_mode_ll);
    stream.next(m.state_estimation);
    stream.next(m.position_control);
    stream.next(m.serial_interface_enabled);
    stream.next(m.serial_interface_active);
    stream.next(m.flight_time);
    stream.next(m.cpu_load);
    stream.next(m.motor_status);
    stream.next(m.gps_status);
    stream.next(m.gps_num_satellites);
    stream.next(m.have_SSDK_parameters);
    stream.next(m.timesync_offset);
    stream.next(m.latitude);
    stream.next(m.longitude);
    stream.next(m.altitude);
    stream.next(m.pressure_height);
    stream.next(m.velocity_x);
    stream.next(m.velocity_y);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct mav_monitor_slow_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::topokite_monitor::mav_monitor_slow_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::topokite_monitor::mav_monitor_slow_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "battery_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.battery_voltage);
    s << indent << "flight_mode_ll: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.flight_mode_ll);
    s << indent << "state_estimation: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state_estimation);
    s << indent << "position_control: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.position_control);
    s << indent << "serial_interface_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.serial_interface_enabled);
    s << indent << "serial_interface_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.serial_interface_active);
    s << indent << "flight_time: ";
    Printer<float>::stream(s, indent + "  ", v.flight_time);
    s << indent << "cpu_load: ";
    Printer<float>::stream(s, indent + "  ", v.cpu_load);
    s << indent << "motor_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.motor_status);
    s << indent << "gps_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gps_status);
    s << indent << "gps_num_satellites: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gps_num_satellites);
    s << indent << "have_SSDK_parameters: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.have_SSDK_parameters);
    s << indent << "timesync_offset: ";
    Printer<float>::stream(s, indent + "  ", v.timesync_offset);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "pressure_height: ";
    Printer<double>::stream(s, indent + "  ", v.pressure_height);
    s << indent << "velocity_x: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_x);
    s << indent << "velocity_y: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_y);
  }
};


} // namespace message_operations
} // namespace ros

#endif // TOPOKITE_MONITOR_MESSAGE_MAV_MONITOR_SLOW_H

