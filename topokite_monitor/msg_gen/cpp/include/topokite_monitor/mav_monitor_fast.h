/* Auto-generated by genmsg_cpp for file /home/topo/ros/topokite_ros_pkg/topokite_monitor/msg/mav_monitor_fast.msg */
#ifndef TOPOKITE_MONITOR_MESSAGE_MAV_MONITOR_FAST_H
#define TOPOKITE_MONITOR_MESSAGE_MAV_MONITOR_FAST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace topokite_monitor
{
template <class ContainerAllocator>
struct mav_monitor_fast_ {
  typedef mav_monitor_fast_<ContainerAllocator> Type;

  mav_monitor_fast_()
  : header()
  , rc_channel()
  , control_axes()
  , control_buttons()
  {
    rc_channel.assign(0);
    control_axes.assign(0);
  }

  mav_monitor_fast_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , rc_channel()
  , control_axes()
  , control_buttons(_alloc)
  {
    rc_channel.assign(0);
    control_axes.assign(0);
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef boost::array<uint16_t, 8>  _rc_channel_type;
  boost::array<uint16_t, 8>  rc_channel;

  typedef boost::array<uint16_t, 6>  _control_axes_type;
  boost::array<uint16_t, 6>  control_axes;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _control_buttons_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  control_buttons;


  typedef boost::shared_ptr< ::topokite_monitor::mav_monitor_fast_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::topokite_monitor::mav_monitor_fast_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct mav_monitor_fast
typedef  ::topokite_monitor::mav_monitor_fast_<std::allocator<void> > mav_monitor_fast;

typedef boost::shared_ptr< ::topokite_monitor::mav_monitor_fast> mav_monitor_fastPtr;
typedef boost::shared_ptr< ::topokite_monitor::mav_monitor_fast const> mav_monitor_fastConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::topokite_monitor::mav_monitor_fast_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::topokite_monitor::mav_monitor_fast_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace topokite_monitor

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::topokite_monitor::mav_monitor_fast_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::topokite_monitor::mav_monitor_fast_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::topokite_monitor::mav_monitor_fast_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ed8f1573ff9de53fd403ade2f6ec0595";
  }

  static const char* value(const  ::topokite_monitor::mav_monitor_fast_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xed8f1573ff9de53fULL;
  static const uint64_t static_value2 = 0xd403ade2f6ec0595ULL;
};

template<class ContainerAllocator>
struct DataType< ::topokite_monitor::mav_monitor_fast_<ContainerAllocator> > {
  static const char* value() 
  {
    return "topokite_monitor/mav_monitor_fast";
  }

  static const char* value(const  ::topokite_monitor::mav_monitor_fast_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::topokite_monitor::mav_monitor_fast_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
#RC data\n\
\n\
uint16[8]   rc_channel\n\
\n\
#Control data\n\
\n\
uint16[6]   control_axes\n\
int32[]     control_buttons\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::topokite_monitor::mav_monitor_fast_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::topokite_monitor::mav_monitor_fast_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::topokite_monitor::mav_monitor_fast_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::topokite_monitor::mav_monitor_fast_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.rc_channel);
    stream.next(m.control_axes);
    stream.next(m.control_buttons);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct mav_monitor_fast_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::topokite_monitor::mav_monitor_fast_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::topokite_monitor::mav_monitor_fast_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "rc_channel[]" << std::endl;
    for (size_t i = 0; i < v.rc_channel.size(); ++i)
    {
      s << indent << "  rc_channel[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.rc_channel[i]);
    }
    s << indent << "control_axes[]" << std::endl;
    for (size_t i = 0; i < v.control_axes.size(); ++i)
    {
      s << indent << "  control_axes[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.control_axes[i]);
    }
    s << indent << "control_buttons[]" << std::endl;
    for (size_t i = 0; i < v.control_buttons.size(); ++i)
    {
      s << indent << "  control_buttons[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.control_buttons[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // TOPOKITE_MONITOR_MESSAGE_MAV_MONITOR_FAST_H

