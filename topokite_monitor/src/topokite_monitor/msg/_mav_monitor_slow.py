"""autogenerated by genpy from topokite_monitor/mav_monitor_slow.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class mav_monitor_slow(genpy.Message):
  _md5sum = "30364e5cea3b1bf4835421c59efec4c5"
  _type = "topokite_monitor/mav_monitor_slow"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

#MAV status

float32     battery_voltage
string      flight_mode_ll
string      state_estimation
string      position_control
bool        serial_interface_enabled
bool        serial_interface_active
float32     flight_time
float32     cpu_load

string      motor_status

string      gps_status
int32       gps_num_satellites

bool        have_SSDK_parameters

float32     timesync_offset

#GPS data

float64     latitude
float64     longitude
float64     altitude
float64     pressure_height
float64     velocity_x
float64     velocity_y
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','battery_voltage','flight_mode_ll','state_estimation','position_control','serial_interface_enabled','serial_interface_active','flight_time','cpu_load','motor_status','gps_status','gps_num_satellites','have_SSDK_parameters','timesync_offset','latitude','longitude','altitude','pressure_height','velocity_x','velocity_y']
  _slot_types = ['std_msgs/Header','float32','string','string','string','bool','bool','float32','float32','string','string','int32','bool','float32','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,battery_voltage,flight_mode_ll,state_estimation,position_control,serial_interface_enabled,serial_interface_active,flight_time,cpu_load,motor_status,gps_status,gps_num_satellites,have_SSDK_parameters,timesync_offset,latitude,longitude,altitude,pressure_height,velocity_x,velocity_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mav_monitor_slow, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.battery_voltage is None:
        self.battery_voltage = 0.
      if self.flight_mode_ll is None:
        self.flight_mode_ll = ''
      if self.state_estimation is None:
        self.state_estimation = ''
      if self.position_control is None:
        self.position_control = ''
      if self.serial_interface_enabled is None:
        self.serial_interface_enabled = False
      if self.serial_interface_active is None:
        self.serial_interface_active = False
      if self.flight_time is None:
        self.flight_time = 0.
      if self.cpu_load is None:
        self.cpu_load = 0.
      if self.motor_status is None:
        self.motor_status = ''
      if self.gps_status is None:
        self.gps_status = ''
      if self.gps_num_satellites is None:
        self.gps_num_satellites = 0
      if self.have_SSDK_parameters is None:
        self.have_SSDK_parameters = False
      if self.timesync_offset is None:
        self.timesync_offset = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.pressure_height is None:
        self.pressure_height = 0.
      if self.velocity_x is None:
        self.velocity_x = 0.
      if self.velocity_y is None:
        self.velocity_y = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.battery_voltage = 0.
      self.flight_mode_ll = ''
      self.state_estimation = ''
      self.position_control = ''
      self.serial_interface_enabled = False
      self.serial_interface_active = False
      self.flight_time = 0.
      self.cpu_load = 0.
      self.motor_status = ''
      self.gps_status = ''
      self.gps_num_satellites = 0
      self.have_SSDK_parameters = False
      self.timesync_offset = 0.
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.pressure_height = 0.
      self.velocity_x = 0.
      self.velocity_y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_f.pack(self.battery_voltage))
      _x = self.flight_mode_ll
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.state_estimation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.position_control
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2B2f.pack(_x.serial_interface_enabled, _x.serial_interface_active, _x.flight_time, _x.cpu_load))
      _x = self.motor_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.gps_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_iBf6d.pack(_x.gps_num_satellites, _x.have_SSDK_parameters, _x.timesync_offset, _x.latitude, _x.longitude, _x.altitude, _x.pressure_height, _x.velocity_x, _x.velocity_y))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.battery_voltage,) = _struct_f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flight_mode_ll = str[start:end].decode('utf-8')
      else:
        self.flight_mode_ll = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_estimation = str[start:end].decode('utf-8')
      else:
        self.state_estimation = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.position_control = str[start:end].decode('utf-8')
      else:
        self.position_control = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.serial_interface_enabled, _x.serial_interface_active, _x.flight_time, _x.cpu_load,) = _struct_2B2f.unpack(str[start:end])
      self.serial_interface_enabled = bool(self.serial_interface_enabled)
      self.serial_interface_active = bool(self.serial_interface_active)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motor_status = str[start:end].decode('utf-8')
      else:
        self.motor_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gps_status = str[start:end].decode('utf-8')
      else:
        self.gps_status = str[start:end]
      _x = self
      start = end
      end += 57
      (_x.gps_num_satellites, _x.have_SSDK_parameters, _x.timesync_offset, _x.latitude, _x.longitude, _x.altitude, _x.pressure_height, _x.velocity_x, _x.velocity_y,) = _struct_iBf6d.unpack(str[start:end])
      self.have_SSDK_parameters = bool(self.have_SSDK_parameters)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_f.pack(self.battery_voltage))
      _x = self.flight_mode_ll
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.state_estimation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.position_control
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2B2f.pack(_x.serial_interface_enabled, _x.serial_interface_active, _x.flight_time, _x.cpu_load))
      _x = self.motor_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.gps_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_iBf6d.pack(_x.gps_num_satellites, _x.have_SSDK_parameters, _x.timesync_offset, _x.latitude, _x.longitude, _x.altitude, _x.pressure_height, _x.velocity_x, _x.velocity_y))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.battery_voltage,) = _struct_f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flight_mode_ll = str[start:end].decode('utf-8')
      else:
        self.flight_mode_ll = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_estimation = str[start:end].decode('utf-8')
      else:
        self.state_estimation = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.position_control = str[start:end].decode('utf-8')
      else:
        self.position_control = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.serial_interface_enabled, _x.serial_interface_active, _x.flight_time, _x.cpu_load,) = _struct_2B2f.unpack(str[start:end])
      self.serial_interface_enabled = bool(self.serial_interface_enabled)
      self.serial_interface_active = bool(self.serial_interface_active)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motor_status = str[start:end].decode('utf-8')
      else:
        self.motor_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gps_status = str[start:end].decode('utf-8')
      else:
        self.gps_status = str[start:end]
      _x = self
      start = end
      end += 57
      (_x.gps_num_satellites, _x.have_SSDK_parameters, _x.timesync_offset, _x.latitude, _x.longitude, _x.altitude, _x.pressure_height, _x.velocity_x, _x.velocity_y,) = _struct_iBf6d.unpack(str[start:end])
      self.have_SSDK_parameters = bool(self.have_SSDK_parameters)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2B2f = struct.Struct("<2B2f")
_struct_3I = struct.Struct("<3I")
_struct_iBf6d = struct.Struct("<iBf6d")
_struct_f = struct.Struct("<f")
